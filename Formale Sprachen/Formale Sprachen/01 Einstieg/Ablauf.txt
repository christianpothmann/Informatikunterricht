Einstieg in formale Sprachen

UG

1. Ziele der Beschäftigung mit formalen Sprachen / Automatentheorie
   - Programmiersprachen: Neue Sprachen entwickeln, Compiler bauen
   - Berechenbarkeit: Mathematisch untersuchen, welche Algorithmen wie viel Zeit brauchen
     Umbruch durch Quantencomputer, Bsp. Verschlüsselung

2. Zeigen: BlueJ kompiliert ein (fehlerhaftes) Programm
   - Begriffe Syntax und Semantik klären
   - Unterschiede Syntax-/Semantikfehler erläutern:
     Syntax kann geprüft werden, Semantik nicht (nicht ohne K.I.)

3. Präsentation
   - Von-Neumann-Rechner erklären 
     Maschinensprache = Prozessor-Befehle, codiert durch Zahlen
	 Compiler übersetzt von Hochsprache (Java) in Maschinensprache
   - Erstes Beispiel für einen endl. Automaten: Postleitzahl
     Schritt für Schritt erläutern

EA/PA

4. SuS entwerfen DEA, der prüft, ob Eingabe ein gültiges Datum ist.
   Vorgaben: Datum zweistellig, ggf. mit führender Null
   (etwas schwieriger: auch einstellige Zahlen zuslassen)
   Tage 1 – 31, Monate 1 – 12, Jahre 0 – 2999, vierstellig (oder 1 - 4-stellig)
   Keine Prüfung ob z.B. 30.02. oder 31.04. korrekt ist.

5. Sichern
   SuS zeichnen Lösung an Tafel
   Ggf. helfen: Verzweigung in mehrere Möglichkeiten
   Aufpassen: Alle Übergänge müssen eindeutig ein; Welches ist der Endzustand?
   „Müllzustand“ zur Vereinfachung weglassen (aber zeigen wie es aussähe)
   Ggf. Lösungen mit Nicht-Determinismus: 
   (hier) nicht erlaubt, wie geht’s mit eindeutigen Übergängen?
   Z.B. um ein- oder zweistellige Zahlen am Anfang zu behandeln:
   mit 1 – 3 in den ersten und den zweiten Zustand übergehen.
   Ggf. Frage: lässt sich Automat reduzieren? (Zustände weglassen)
  
Nächste Stunde

  Zum Üben: Automat für Straße / Hausnummer
  Benutzt auch Wiederholung, um beliebig lange Wörter und beliebig viele Wörter zu erlauben
